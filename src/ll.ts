import { symbols } from './ffi.ts';

export type WINDOW = Deno.UnsafePointer;
export type TERMINAL = Deno.UnsafePointer;
export type FILE = Deno.UnsafePointer;
export type SCREEN = Deno.UnsafePointer;
export type MEVENT = Deno.UnsafePointer;

export const wgetch_events = (win: WINDOW, evl: any): number => symbols.wgetch_events(win, evl) as number;
export const addch = (z: number): number => symbols.addch(z) as number;
export const addchnstr = (a1: Uint8Array, z: number): number => symbols.addchnstr(a1, z) as number;
export const addchstr = (z: Uint8Array): number => symbols.addchstr(z) as number;
export const addnstr = (a1: Uint8Array, z: number): number => symbols.addnstr(a1, z) as number;
export const addstr = (z: Uint8Array): number => symbols.addstr(z) as number;
export const attroff = (z: number): number => symbols.attroff(z) as number;
export const attron = (z: number): number => symbols.attron(z) as number;
export const attrset = (z: number): number => symbols.attrset(z) as number;
export const attr_get = (a1: number, a2: number, z: any): number => symbols.attr_get(a1, a2, z) as number;
export const attr_off = (a1: number, z: any): number => symbols.attr_off(a1, z) as number;
export const attr_on = (a1: number, z: any): number => symbols.attr_on(a1, z) as number;
export const attr_set = (a1: number, a2: number, z: any): number => symbols.attr_set(a1, a2, z) as number;
export const baudrate = (): number => symbols.baudrate() as number;
export const beep = (): number => symbols.beep() as number;
export const bkgd = (z: number): number => symbols.bkgd(z) as number;
export const bkgdset = (z: number): any => symbols.bkgdset(z) as any;
export const border = (a1: number, a2: number, a3: number, a4: number, a5: number, a6: number, a7: number, z: number): number => symbols.border(a1, a2, a3, a4, a5, a6, a7, z) as number;
export const box = (a1: WINDOW, a2: number, z: number): number => symbols.box(a1, a2, z) as number;
export const can_change_color = (): number => symbols.can_change_color() as number;
export const cbreak = (): number => symbols.cbreak() as number;
export const chgat = (a1: number, a2: number, a3: number, z: any): number => symbols.chgat(a1, a2, a3, z) as number;
export const clear = (): number => symbols.clear() as number;
export const clearok = (win: WINDOW, flag: number): number => symbols.clearok(win, flag) as number;
export const clrtobot = (): number => symbols.clrtobot() as number;
export const clrtoeol = (): number => symbols.clrtoeol() as number;
export const color_content = (color: number, r: number, g: number, b: number): number => symbols.color_content(color, r, g, b) as number;
export const color_set = (a1: number, z: any): number => symbols.color_set(a1, z) as number;
export const copywin = (src: WINDOW, dst: WINDOW, sminrow: number, smincol: number, dminrow: number, dmincol: number, dmaxrow: number, dmaxcol: number, over: number): number => symbols.copywin(src, dst, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol, over) as number;
export const curs_set = (vis: number): number => symbols.curs_set(vis) as number;
export const def_prog_mode = (): number => symbols.def_prog_mode() as number;
export const def_shell_mode = (): number => symbols.def_shell_mode() as number;
export const delay_output = (ms: number): number => symbols.delay_output(ms) as number;
export const delch = (): number => symbols.delch() as number;
export const delscreen = (sp: SCREEN): any => symbols.delscreen(sp) as any;
export const delwin = (win: WINDOW): number => symbols.delwin(win) as number;
export const deleteln = (): number => symbols.deleteln() as number;
export const derwin = (orig: WINDOW, num_lines: number, num_columns: number, begy: number, begx: number): WINDOW => symbols.derwin(orig, num_lines, num_columns, begy, begx) as WINDOW;
export const doupdate = (): number => symbols.doupdate() as number;
export const dupwin = (win: WINDOW): WINDOW => symbols.dupwin(win) as WINDOW;
export const echo = (): number => symbols.echo() as number;
export const echochar = (z: number): number => symbols.echochar(z) as number;
export const erase = (): number => symbols.erase() as number;
export const endwin = (): number => symbols.endwin() as number;
export const erasechar = (): number => symbols.erasechar() as number;
export const filter = (): any => symbols.filter() as any;
export const flash = (): number => symbols.flash() as number;
export const flushinp = (): number => symbols.flushinp() as number;
export const getbkgd = (z: WINDOW): number => symbols.getbkgd(z) as number;
export const getch = (): number => symbols.getch() as number;
export const getnstr = (a1: Uint8Array, z: number): number => symbols.getnstr(a1, z) as number;
export const getstr = (z: Uint8Array): number => symbols.getstr(z) as number;
export const getwin = (filep: FILE): WINDOW => symbols.getwin(filep) as WINDOW;
export const halfdelay = (t: number): number => symbols.halfdelay(t) as number;
export const has_colors = (): number => symbols.has_colors() as number;
export const has_ic = (): number => symbols.has_ic() as number;
export const has_il = (): number => symbols.has_il() as number;
export const hline = (a1: number, z: number): number => symbols.hline(a1, z) as number;
export const idcok = (win: WINDOW, flag: number): any => symbols.idcok(win, flag) as any;
export const idlok = (win: WINDOW, flag: number): number => symbols.idlok(win, flag) as number;
export const immedok = (win: WINDOW, flag: number): any => symbols.immedok(win, flag) as any;
export const inch = (): number => symbols.inch() as number;
export const inchnstr = (a1: Uint8Array, z: number): number => symbols.inchnstr(a1, z) as number;
export const inchstr = (z: Uint8Array): number => symbols.inchstr(z) as number;
export const initscr = (): WINDOW => symbols.initscr() as WINDOW;
export const init_color = (color: number, r: number, g: number, b: number): number => symbols.init_color(color, r, g, b) as number;
export const init_pair = (pair: number, f: number, b: number): number => symbols.init_pair(pair, f, b) as number;
export const innstr = (a1: Uint8Array, z: number): number => symbols.innstr(a1, z) as number;
export const insch = (z: number): number => symbols.insch(z) as number;
export const insdelln = (z: number): number => symbols.insdelln(z) as number;
export const insertln = (): number => symbols.insertln() as number;
export const insnstr = (a1: Uint8Array, z: number): number => symbols.insnstr(a1, z) as number;
export const insstr = (z: Uint8Array): number => symbols.insstr(z) as number;
export const instr = (z: Uint8Array): number => symbols.instr(z) as number;
export const intrflush = (win: WINDOW, flag: number): number => symbols.intrflush(win, flag) as number;
export const isendwin = (): number => symbols.isendwin() as number;
export const is_linetouched = (win: WINDOW, line: number): number => symbols.is_linetouched(win, line) as number;
export const is_wintouched = (win: WINDOW): number => symbols.is_wintouched(win) as number;
export const keyname = (c: number): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols.keyname(c) as Deno.UnsafePointer);
export const keypad = (win: WINDOW, flag: number): number => symbols.keypad(win, flag) as number;
export const killchar = (): number => symbols.killchar() as number;
export const leaveok = (win: WINDOW, flag: number): number => symbols.leaveok(win, flag) as number;
export const longname = (): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols.longname() as Deno.UnsafePointer);
export const meta = (win: WINDOW, flag: number): number => symbols.meta(win, flag) as number;
export const move = (a1: number, z: number): number => symbols.move(a1, z) as number;
export const mvaddch = (a1: number, a2: number, z: number): number => symbols.mvaddch(a1, a2, z) as number;
export const mvaddchnstr = (a1: number, a2: number, a3: Uint8Array, z: number): number => symbols.mvaddchnstr(a1, a2, a3, z) as number;
export const mvaddchstr = (a1: number, a2: number, z: Uint8Array): number => symbols.mvaddchstr(a1, a2, z) as number;
export const mvaddnstr = (a1: number, a2: number, a3: Uint8Array, z: number): number => symbols.mvaddnstr(a1, a2, a3, z) as number;
export const mvaddstr = (a1: number, a2: number, z: Uint8Array): number => symbols.mvaddstr(a1, a2, z) as number;
export const mvchgat = (a1: number, a2: number, a3: number, a4: number, a5: number, z: any): number => symbols.mvchgat(a1, a2, a3, a4, a5, z) as number;
export const mvcur = (yold: number, xold: number, ynew: number, xnew: number): number => symbols.mvcur(yold, xold, ynew, xnew) as number;
export const mvdelch = (a1: number, z: number): number => symbols.mvdelch(a1, z) as number;
export const mvderwin = (win: WINDOW, y: number, x: number): number => symbols.mvderwin(win, y, x) as number;
export const mvgetch = (a1: number, z: number): number => symbols.mvgetch(a1, z) as number;
export const mvgetnstr = (a1: number, a2: number, a3: Uint8Array, z: number): number => symbols.mvgetnstr(a1, a2, a3, z) as number;
export const mvgetstr = (a1: number, a2: number, z: Uint8Array): number => symbols.mvgetstr(a1, a2, z) as number;
export const mvhline = (a1: number, a2: number, a3: number, z: number): number => symbols.mvhline(a1, a2, a3, z) as number;
export const mvinch = (a1: number, z: number): number => symbols.mvinch(a1, z) as number;
export const mvinchnstr = (a1: number, a2: number, a3: Uint8Array, z: number): number => symbols.mvinchnstr(a1, a2, a3, z) as number;
export const mvinchstr = (a1: number, a2: number, z: Uint8Array): number => symbols.mvinchstr(a1, a2, z) as number;
export const mvinnstr = (a1: number, a2: number, a3: Uint8Array, z: number): number => symbols.mvinnstr(a1, a2, a3, z) as number;
export const mvinsch = (a1: number, a2: number, z: number): number => symbols.mvinsch(a1, a2, z) as number;
export const mvinsnstr = (a1: number, a2: number, a3: Uint8Array, z: number): number => symbols.mvinsnstr(a1, a2, a3, z) as number;
export const mvinsstr = (a1: number, a2: number, z: Uint8Array): number => symbols.mvinsstr(a1, a2, z) as number;
export const mvinstr = (a1: number, a2: number, z: Uint8Array): number => symbols.mvinstr(a1, a2, z) as number;
export const _nc_scroll_optimize = (): any => symbols._nc_scroll_optimize() as any;
export const mvvline = (a1: number, a2: number, a3: number, z: number): number => symbols.mvvline(a1, a2, a3, z) as number;
export const mvwaddch = (a1: WINDOW, a2: number, a3: number, z: number): number => symbols.mvwaddch(a1, a2, a3, z) as number;
export const mvwaddchnstr = (a1: WINDOW, a2: number, a3: number, a4: Uint8Array, z: number): number => symbols.mvwaddchnstr(a1, a2, a3, a4, z) as number;
export const mvwaddchstr = (a1: WINDOW, a2: number, a3: number, z: Uint8Array): number => symbols.mvwaddchstr(a1, a2, a3, z) as number;
export const mvwaddnstr = (a1: WINDOW, a2: number, a3: number, a4: Uint8Array, z: number): number => symbols.mvwaddnstr(a1, a2, a3, a4, z) as number;
export const mvwaddstr = (a1: WINDOW, a2: number, a3: number, z: Uint8Array): number => symbols.mvwaddstr(a1, a2, a3, z) as number;
export const mvwchgat = (a1: WINDOW, a2: number, a3: number, a4: number, a5: number, a6: number, z: any): number => symbols.mvwchgat(a1, a2, a3, a4, a5, a6, z) as number;
export const mvwdelch = (a1: WINDOW, a2: number, z: number): number => symbols.mvwdelch(a1, a2, z) as number;
export const mvwgetch = (a1: WINDOW, a2: number, z: number): number => symbols.mvwgetch(a1, a2, z) as number;
export const mvwgetnstr = (a1: WINDOW, a2: number, a3: number, a4: Uint8Array, z: number): number => symbols.mvwgetnstr(a1, a2, a3, a4, z) as number;
export const mvwgetstr = (a1: WINDOW, a2: number, a3: number, z: Uint8Array): number => symbols.mvwgetstr(a1, a2, a3, z) as number;
export const mvwhline = (a1: WINDOW, a2: number, a3: number, a4: number, z: number): number => symbols.mvwhline(a1, a2, a3, a4, z) as number;
export const mvwin = (win: WINDOW, by: number, bx: number): number => symbols.mvwin(win, by, bx) as number;
export const mvwinch = (a1: WINDOW, a2: number, z: number): number => symbols.mvwinch(a1, a2, z) as number;
export const mvwinchnstr = (a1: WINDOW, a2: number, a3: number, a4: Uint8Array, z: number): number => symbols.mvwinchnstr(a1, a2, a3, a4, z) as number;
export const mvwinchstr = (a1: WINDOW, a2: number, a3: number, z: Uint8Array): number => symbols.mvwinchstr(a1, a2, a3, z) as number;
export const mvwinnstr = (a1: WINDOW, a2: number, a3: number, a4: Uint8Array, z: number): number => symbols.mvwinnstr(a1, a2, a3, a4, z) as number;
export const mvwinsch = (a1: WINDOW, a2: number, a3: number, z: number): number => symbols.mvwinsch(a1, a2, a3, z) as number;
export const mvwinsnstr = (a1: WINDOW, a2: number, a3: number, a4: Uint8Array, z: number): number => symbols.mvwinsnstr(a1, a2, a3, a4, z) as number;
export const mvwinsstr = (a1: WINDOW, a2: number, a3: number, z: Uint8Array): number => symbols.mvwinsstr(a1, a2, a3, z) as number;
export const mvwinstr = (a1: WINDOW, a2: number, a3: number, z: Uint8Array): number => symbols.mvwinstr(a1, a2, a3, z) as number;
export const mvwvline = (a1: WINDOW, a2: number, a3: number, a4: number, z: number): number => symbols.mvwvline(a1, a2, a3, a4, z) as number;
export const napms = (ms: number): number => symbols.napms(ms) as number;
export const newpad = (l: number, c: number): WINDOW => symbols.newpad(l, c) as WINDOW;
export const newterm = (name: Uint8Array, ofp: FILE, ifp: FILE): SCREEN => symbols.newterm(name, ofp, ifp) as SCREEN;
export const newwin = (num_lines: number, num_columns: number, begy: number, begx: number): WINDOW => symbols.newwin(num_lines, num_columns, begy, begx) as WINDOW;
export const nl = (): number => symbols.nl() as number;
export const nocbreak = (): number => symbols.nocbreak() as number;
export const nodelay = (win: WINDOW, flag: number): number => symbols.nodelay(win, flag) as number;
export const noecho = (): number => symbols.noecho() as number;
export const nonl = (): number => symbols.nonl() as number;
export const noqiflush = (): any => symbols.noqiflush() as any;
export const noraw = (): number => symbols.noraw() as number;
export const notimeout = (win: WINDOW, f: number): number => symbols.notimeout(win, f) as number;
export const overlay = (win1: WINDOW, win2: WINDOW): number => symbols.overlay(win1, win2) as number;
export const overwrite = (win1: WINDOW, win2: WINDOW): number => symbols.overwrite(win1, win2) as number;
export const pair_content = (pair: number, f: number, b: number): number => symbols.pair_content(pair, f, b) as number;
export const PAIR_NUMBER = (z: number): number => symbols.PAIR_NUMBER(z) as number;
export const pechochar = (pad: WINDOW, ch: number): number => symbols.pechochar(pad, ch) as number;
export const pnoutrefresh = (win: WINDOW, pminrow: number, pmincol: number, sminrow: number, smincol: number, smaxrow: number, smaxcol: number): number => symbols.pnoutrefresh(win, pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol) as number;
export const prefresh = (win: WINDOW, pminrow: number, pmincol: number, sminrow: number, smincol: number, smaxrow: number, smaxcol: number): number => symbols.prefresh(win, pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol) as number;
export const putwin = (win: WINDOW, filep: FILE): number => symbols.putwin(win, filep) as number;
export const qiflush = (): any => symbols.qiflush() as any;
export const raw = (): number => symbols.raw() as number;
export const redrawwin = (z: WINDOW): number => symbols.redrawwin(z) as number;
export const refresh = (): number => symbols.refresh() as number;
export const resetty = (): number => symbols.resetty() as number;
export const reset_prog_mode = (): number => symbols.reset_prog_mode() as number;
export const reset_shell_mode = (): number => symbols.reset_shell_mode() as number;
export const ripoffline = (line: number, PLACEHOLDER: any): number => symbols.ripoffline(line, PLACEHOLDER) as number;
export const savetty = (): number => symbols.savetty() as number;
export const scr_dump = (file: Uint8Array): number => symbols.scr_dump(file) as number;
export const scr_init = (file: Uint8Array): number => symbols.scr_init(file) as number;
export const scrl = (z: number): number => symbols.scrl(z) as number;
export const scroll = (z: WINDOW): number => symbols.scroll(z) as number;
export const scrollok = (win: WINDOW, flag: number): number => symbols.scrollok(win, flag) as number;
export const scr_restore = (file: Uint8Array): number => symbols.scr_restore(file) as number;
export const scr_set = (file: Uint8Array): number => symbols.scr_set(file) as number;
export const setscrreg = (a1: number, z: number): number => symbols.setscrreg(a1, z) as number;
export const set_term = (screenp: SCREEN): SCREEN => symbols.set_term(screenp) as SCREEN;
export const slk_attroff = (attr: number): number => symbols.slk_attroff(attr) as number;
export const slk_attr_off = (a1: number, z: any): number => symbols.slk_attr_off(a1, z) as number;
export const slk_attron = (attr: number): number => symbols.slk_attron(attr) as number;
export const slk_attr_on = (a1: number, z: any): number => symbols.slk_attr_on(a1, z) as number;
export const slk_attrset = (attr: number): number => symbols.slk_attrset(attr) as number;
export const slk_attr = (): number => symbols.slk_attr() as number;
export const slk_attr_set = (attr: number, color_pair_number: number, opts: any): number => symbols.slk_attr_set(attr, color_pair_number, opts) as number;
export const slk_clear = (): number => symbols.slk_clear() as number;
export const slk_color = (color_pair_number: number): number => symbols.slk_color(color_pair_number) as number;
export const slk_init = (format: number): number => symbols.slk_init(format) as number;
export const slk_label = (n: number): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols.slk_label(n) as Deno.UnsafePointer);
export const slk_noutrefresh = (): number => symbols.slk_noutrefresh() as number;
export const slk_refresh = (): number => symbols.slk_refresh() as number;
export const slk_restore = (): number => symbols.slk_restore() as number;
export const slk_set = (i: number, astr: Uint8Array, format: number): number => symbols.slk_set(i, astr, format) as number;
export const slk_touch = (): number => symbols.slk_touch() as number;
export const standout = (): number => symbols.standout() as number;
export const standend = (): number => symbols.standend() as number;
export const start_color = (): number => symbols.start_color() as number;
export const subpad = (orig: WINDOW, l: number, c: number, begy: number, begx: number): WINDOW => symbols.subpad(orig, l, c, begy, begx) as WINDOW;
export const subwin = (w: WINDOW, l: number, c: number, y: number, x: number): WINDOW => symbols.subwin(w, l, c, y, x) as WINDOW;
export const syncok = (win: WINDOW, bf: number): number => symbols.syncok(win, bf) as number;
export const termattrs = (): number => symbols.termattrs() as number;
export const termname = (): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols.termname() as Deno.UnsafePointer);
export const timeout = (z: number): any => symbols.timeout(z) as any;
export const touchline = (a1: WINDOW, a2: number, z: number): number => symbols.touchline(a1, a2, z) as number;
export const touchwin = (z: WINDOW): number => symbols.touchwin(z) as number;
export const typeahead = (fd: number): number => symbols.typeahead(fd) as number;
export const ungetch = (ch: number): number => symbols.ungetch(ch) as number;
export const untouchwin = (z: WINDOW): number => symbols.untouchwin(z) as number;
export const use_env = (f: number): any => symbols.use_env(f) as any;
export const vidattr = (newmode: number): number => symbols.vidattr(newmode) as number;
export const vidputs = (newmode: number, PLACEHOLDER: any): number => symbols.vidputs(newmode, PLACEHOLDER) as number;
export const vline = (a1: number, z: number): number => symbols.vline(a1, z) as number;
export const vwprintw = (win: WINDOW, fmt: Uint8Array, argp: any): number => symbols.vwprintw(win, fmt, argp) as number;
export const vw_printw = (a1: WINDOW, a2: Uint8Array, z: any): number => symbols.vw_printw(a1, a2, z) as number;
export const vwscanw = (win: WINDOW, fmt: Uint8Array, argp: any): number => symbols.vwscanw(win, fmt, argp) as number;
export const vw_scanw = (a1: WINDOW, a2: Uint8Array, z: any): number => symbols.vw_scanw(a1, a2, z) as number;
export const waddch = (win: WINDOW, ch: number): number => symbols.waddch(win, ch) as number;
export const waddchnstr = (win: WINDOW, astr: Uint8Array, n: number): number => symbols.waddchnstr(win, astr, n) as number;
export const waddchstr = (a1: WINDOW, z: Uint8Array): number => symbols.waddchstr(a1, z) as number;
export const waddnstr = (win: WINDOW, astr: Uint8Array, n: number): number => symbols.waddnstr(win, astr, n) as number;
export const waddstr = (a1: WINDOW, z: Uint8Array): number => symbols.waddstr(a1, z) as number;
export const wattron = (a1: WINDOW, z: number): number => symbols.wattron(a1, z) as number;
export const wattroff = (a1: WINDOW, z: number): number => symbols.wattroff(a1, z) as number;
export const wattrset = (a1: WINDOW, z: number): number => symbols.wattrset(a1, z) as number;
export const wattr_get = (a1: WINDOW, a2: number, a3: number, z: any): number => symbols.wattr_get(a1, a2, a3, z) as number;
export const wattr_on = (win: WINDOW, at: number, opts: any): number => symbols.wattr_on(win, at, opts) as number;
export const wattr_off = (win: WINDOW, at: number, opts: any): number => symbols.wattr_off(win, at, opts) as number;
export const wattr_set = (a1: WINDOW, a2: number, a3: number, z: any): number => symbols.wattr_set(a1, a2, a3, z) as number;
export const wbkgd = (win: WINDOW, ch: number): number => symbols.wbkgd(win, ch) as number;
export const wbkgdset = (win: WINDOW, ch: number): any => symbols.wbkgdset(win, ch) as any;
export const wborder = (win: WINDOW, ls: number, rs: number, ts: number, bs: number, tl: number, tr: number, bl: number, br: number): number => symbols.wborder(win, ls, rs, ts, bs, tl, tr, bl, br) as number;
export const wchgat = (win: WINDOW, n: number, attr: number, color: number, opts: any): number => symbols.wchgat(win, n, attr, color, opts) as number;
export const wclear = (win: WINDOW): number => symbols.wclear(win) as number;
export const wclrtobot = (win: WINDOW): number => symbols.wclrtobot(win) as number;
export const wclrtoeol = (win: WINDOW): number => symbols.wclrtoeol(win) as number;
export const wcolor_set = (win: WINDOW, color_pair_number: number, opts: any): number => symbols.wcolor_set(win, color_pair_number, opts) as number;
export const wcursyncup = (win: WINDOW): any => symbols.wcursyncup(win) as any;
export const wdelch = (win: WINDOW): number => symbols.wdelch(win) as number;
export const wdeleteln = (z: WINDOW): number => symbols.wdeleteln(z) as number;
export const wechochar = (win: WINDOW, ch: number): number => symbols.wechochar(win, ch) as number;
export const werase = (win: WINDOW): number => symbols.werase(win) as number;
export const wgetch = (win: WINDOW): number => symbols.wgetch(win) as number;
export const wgetnstr = (win: WINDOW, str: Uint8Array, maxlen: number): number => symbols.wgetnstr(win, str, maxlen) as number;
export const wgetstr = (a1: WINDOW, z: Uint8Array): number => symbols.wgetstr(a1, z) as number;
export const whline = (win: WINDOW, ch: number, n: number): number => symbols.whline(win, ch, n) as number;
export const winch = (win: WINDOW): number => symbols.winch(win) as number;
export const winchnstr = (win: WINDOW, str: Uint8Array, n: number): number => symbols.winchnstr(win, str, n) as number;
export const winchstr = (a1: WINDOW, z: Uint8Array): number => symbols.winchstr(a1, z) as number;
export const winnstr = (win: WINDOW, str: Uint8Array, n: number): number => symbols.winnstr(win, str, n) as number;
export const winsch = (win: WINDOW, c: number): number => symbols.winsch(win, c) as number;
export const winsdelln = (win: WINDOW, n: number): number => symbols.winsdelln(win, n) as number;
export const winsertln = (z: WINDOW): number => symbols.winsertln(z) as number;
export const winsnstr = (win: WINDOW, s: Uint8Array, n: number): number => symbols.winsnstr(win, s, n) as number;
export const winsstr = (a1: WINDOW, z: Uint8Array): number => symbols.winsstr(a1, z) as number;
export const winstr = (a1: WINDOW, z: Uint8Array): number => symbols.winstr(a1, z) as number;
export const wmove = (win: WINDOW, y: number, x: number): number => symbols.wmove(win, y, x) as number;
export const wnoutrefresh = (win: WINDOW): number => symbols.wnoutrefresh(win) as number;
export const wredrawln = (win: WINDOW, beg: number, num: number): number => symbols.wredrawln(win, beg, num) as number;
export const wrefresh = (win: WINDOW): number => symbols.wrefresh(win) as number;
export const wscrl = (win: WINDOW, n: number): number => symbols.wscrl(win, n) as number;
export const wsetscrreg = (win: WINDOW, top: number, bottom: number): number => symbols.wsetscrreg(win, top, bottom) as number;
export const wstandout = (z: WINDOW): number => symbols.wstandout(z) as number;
export const wstandend = (z: WINDOW): number => symbols.wstandend(z) as number;
export const wsyncdown = (win: WINDOW): any => symbols.wsyncdown(win) as any;
export const wsyncup = (win: WINDOW): any => symbols.wsyncup(win) as any;
export const wtimeout = (win: WINDOW, delay: number): any => symbols.wtimeout(win, delay) as any;
export const wtouchln = (win: WINDOW, y: number, n: number, changed: number): number => symbols.wtouchln(win, y, n, changed) as number;
export const wvline = (win: WINDOW, ch: number, n: number): number => symbols.wvline(win, ch, n) as number;
export const tigetflag = (str: Uint8Array): number => symbols.tigetflag(str) as number;
export const tigetnum = (str: Uint8Array): number => symbols.tigetnum(str) as number;
export const tigetstr = (str: Uint8Array): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols.tigetstr(str) as Deno.UnsafePointer);
export const putp = (string: Uint8Array): number => symbols.putp(string) as number;
export const tparm = (string: Uint8Array): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols.tparm(string) as Deno.UnsafePointer);
export const getattrs = (z: WINDOW): number => symbols.getattrs(z) as number;
export const getcurx = (z: WINDOW): number => symbols.getcurx(z) as number;
export const getcury = (z: WINDOW): number => symbols.getcury(z) as number;
export const getbegx = (z: WINDOW): number => symbols.getbegx(z) as number;
export const getbegy = (z: WINDOW): number => symbols.getbegy(z) as number;
export const getmaxx = (z: WINDOW): number => symbols.getmaxx(z) as number;
export const getmaxy = (z: WINDOW): number => symbols.getmaxy(z) as number;
export const getparx = (z: WINDOW): number => symbols.getparx(z) as number;
export const getpary = (z: WINDOW): number => symbols.getpary(z) as number;
export const is_term_resized = (ToLines: number, ToCols: number): number => symbols.is_term_resized(ToLines, ToCols) as number;
export const keybound = (code: number, count: number): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols.keybound(code, count) as Deno.UnsafePointer);
export const curses_version = (): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols.curses_version() as Deno.UnsafePointer);
export const assume_default_colors = (fg: number, bg: number): number => symbols.assume_default_colors(fg, bg) as number;
export const define_key = (str: Uint8Array, keycode: number): number => symbols.define_key(str, keycode) as number;
export const key_defined = (str: Uint8Array): number => symbols.key_defined(str) as number;
export const keyok = (c: number, flag: number): number => symbols.keyok(c, flag) as number;
export const resize_term = (ToLines: number, ToCols: number): number => symbols.resize_term(ToLines, ToCols) as number;
export const resizeterm = (ToLines: number, ToCols: number): number => symbols.resizeterm(ToLines, ToCols) as number;
export const set_escdelay = (value: number): number => symbols.set_escdelay(value) as number;
export const set_tabsize = (value: number): number => symbols.set_tabsize(value) as number;
export const use_default_colors = (): number => symbols.use_default_colors() as number;
export const use_extended_names = (flag: number): number => symbols.use_extended_names(flag) as number;
export const use_legacy_coding = (level: number): number => symbols.use_legacy_coding(level) as number;
export const use_screen = (screen: SCREEN, func: any, data: any): number => symbols.use_screen(screen, func, data) as number;
export const use_window = (win: WINDOW, func: any, data: any): number => symbols.use_window(win, func, data) as number;
export const wresize = (win: WINDOW, ToLines: number, ToCols: number): number => symbols.wresize(win, ToLines, ToCols) as number;
export const nofilter = (): any => symbols.nofilter() as any;
export const wgetparent = (z: WINDOW): WINDOW => symbols.wgetparent(z) as WINDOW;
export const is_cleared = (z: WINDOW): number => symbols.is_cleared(z) as number;
export const is_idcok = (z: WINDOW): number => symbols.is_idcok(z) as number;
export const is_idlok = (z: WINDOW): number => symbols.is_idlok(z) as number;
export const is_immedok = (z: WINDOW): number => symbols.is_immedok(z) as number;
export const is_keypad = (z: WINDOW): number => symbols.is_keypad(z) as number;
export const is_leaveok = (z: WINDOW): number => symbols.is_leaveok(z) as number;
export const is_nodelay = (z: WINDOW): number => symbols.is_nodelay(z) as number;
export const is_notimeout = (z: WINDOW): number => symbols.is_notimeout(z) as number;
export const is_scrollok = (z: WINDOW): number => symbols.is_scrollok(z) as number;
export const is_syncok = (z: WINDOW): number => symbols.is_syncok(z) as number;
export const wgetscrreg = (a1: WINDOW, a2: number, z: number): number => symbols.wgetscrreg(a1, a2, z) as number;
export const getmouse = (aevent: MEVENT): number => symbols.getmouse(aevent) as number;
export const ungetmouse = (aevent: MEVENT): number => symbols.ungetmouse(aevent) as number;
export const mousemask = (newmask: number, oldmask: number): number => symbols.mousemask(newmask, oldmask) as number;
export const wenclose = (win: WINDOW, y: number, x: number): number => symbols.wenclose(win, y, x) as number;
export const mouseinterval = (maxclick: number): number => symbols.mouseinterval(maxclick) as number;
export const wmouse_trafo = (win: WINDOW, pY: number, pX: number, to_screen: number): number => symbols.wmouse_trafo(win, pY, pX, to_screen) as number;
export const mouse_trafo = (a1: number, a2: number, z: number): number => symbols.mouse_trafo(a1, a2, z) as number;
export const mcprint = (data: Uint8Array, len: number): number => symbols.mcprint(data, len) as number;
export const has_key = (keycode: number): number => symbols.has_key(keycode) as number;
export const _tracedump = (name: Uint8Array, win: WINDOW): any => symbols._tracedump(name, win) as any;
export const _traceattr = (newmode: number): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols._traceattr(newmode) as Deno.UnsafePointer);
export const _traceattr2 = (bufnum: number, newmode: number): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols._traceattr2(bufnum, newmode) as Deno.UnsafePointer);
export const _nc_tracebits = (): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols._nc_tracebits() as Deno.UnsafePointer);
export const _tracechar = (ch: number): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols._tracechar(ch) as Deno.UnsafePointer);
export const _tracechtype = (ch: number): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols._tracechtype(ch) as Deno.UnsafePointer);
export const _tracechtype2 = (bufnum: number, ch: number): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols._tracechtype2(bufnum, ch) as Deno.UnsafePointer);
export const _tracecchar_t = (ch: any): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols._tracecchar_t(ch) as Deno.UnsafePointer);
export const _tracecchar_t2 = (bufnum: number, ch: any): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols._tracecchar_t2(bufnum, ch) as Deno.UnsafePointer);
export const trace = (tracelevel: number): any => symbols.trace(tracelevel) as any;
export const _nc_visbuf = (buf: Uint8Array): Deno.UnsafePointerView => new Deno.UnsafePointerView(symbols._nc_visbuf(buf) as Deno.UnsafePointer);
